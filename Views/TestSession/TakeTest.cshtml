@model TestMaster.ViewModels.TakeTestViewModel

@{
    Layout = "~/Views/Shared/_EmployeeLayout.cshtml";
    ViewData["Title"] = Model.Test.Title;

    // SỬA LỖI: Sắp xếp câu hỏi và tạo một Dictionary tra cứu câu trả lời một lần duy nhất.
    // Điều này đảm bảo thứ tự câu hỏi luôn nhất quán và cải thiện hiệu năng.
    var questions = Model.Test.Questions.OrderBy(q => q.QuestionId).ToList();
    var userAnswersMap = Model.UserAnswers.ToDictionary(a => a.QuestionId);
}

<style>
    .test-wrapper {
        display: flex;
        flex-wrap: wrap-reverse;
        gap: 2rem;
    }

    .test-main-content {
        flex: 1;
        min-width: 60%;
    }

    .test-sidebar {
        width: 100%;
    }

    @@media (min-width: 992px) {
        .test-wrapper {
            flex-wrap: nowrap;
        }

        .test-sidebar {
            width: 300px;
        }
    }

    .sidebar-inner {
        position: sticky;
        top: 20px;
    }

    .timer-container {
        position: relative;
        width: 150px;
        height: 150px;
        margin: 0 auto;
    }

    .timer-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2.5rem;
        font-weight: 700;
    }

    .question-palette {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
        gap: 8px;
        max-height: 350px;
        overflow-y: auto;
        padding: 10px;
        border-radius: .35rem;
        background-color: #f8f9fc;
    }

    .palette-item {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 40px;
        height: 40px;
        border: 1px solid #ddd;
        border-radius: 50%;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.2s ease;
        background-color: #fff;
        color: #6c757d;
        text-decoration: none !important;
    }

        .palette-item:hover {
            background-color: #e9ecef;
            border-color: #4e73df;
        }

        .palette-item.answered {
            background-color: #1cc88a;
            color: #fff;
            border-color: #1cc88a;
        }

        .palette-item.marked {
            background-color: #f6c23e;
            color: #fff;
            border-color: #f6c23e;
        }

    .question-card {
        scroll-margin-top: 20px;
    }

        .question-card.unanswered-error {
            border: 2px solid #e74a3b;
            box-shadow: 0 .5rem 1rem rgba(231, 74, 59, .25) !important;
        }

    .autosave-status {
        font-size: 0.8rem;
        color: #858796;
        height: 20px;
        transition: opacity 0.5s;
    }
</style>

<div class="container-fluid my-4">
    <form asp-controller="TestSession" asp-action="SubmitTest" method="post" id="testForm" onsubmit="return validateAndSubmit();">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="SessionId" />

        <div class="test-wrapper">
            <div class="test-sidebar">
                <div class="sidebar-inner">
                    <div class="card shadow">
                        <div class="card-body text-center">
                            <div class="timer-container mb-3">
                                <canvas id="timer-chart"></canvas>
                                <div id="timer-text" class="timer-text text-gray-800"></div>
                            </div>
                            <div class="autosave-status mb-2" id="autosave-status"></div>
                            <button type="submit" class="btn btn-success btn-block">Nộp bài</button>
                            <a asp-controller="EmployeeDashboard" asp-action="MyTests" class="btn btn-secondary btn-block mt-2">Quay lại</a>
                        </div>
                        <div class="card-header">
                            <h6 class="m-0 font-weight-bold text-primary">Bảng câu hỏi</h6>
                        </div>
                        <div class="card-body">
                            <div class="question-palette">
                                @for (int i = 0; i < questions.Count; i++)
                                {
                                    <a class="palette-item" href="#question-card-@i" id="palette-item-@i">
                                        @(i + 1)
                                    </a>
                                }
                            </div>
                            <div class="mt-3 small">
                                <div><span class="badge badge-success">&nbsp;</span> Đã trả lời</div>
                                <div class="mt-1"><span class="badge badge-warning">&nbsp;</span> Đánh dấu xem lại</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="test-main-content">
                <div class="d-sm-flex align-items-center justify-content-between mb-4">
                    <h1 class="h3 mb-0 text-gray-800">@Model.Test.Title</h1>
                </div>

                @for (int i = 0; i < questions.Count; i++)
                {
                    var question = questions[i];
                    userAnswersMap.TryGetValue(question.QuestionId, out var savedAnswer);

                    <div class="card shadow-sm mb-3 question-card" id="question-card-@i">
                        <div class="card-header d-flex justify-content-between align-items-center bg-light">
                            <h6 class="m-0 font-weight-bold text-primary">
                                Câu @(i + 1): @Html.Raw(question.Content)
                            </h6>
                            <div class="form-check">
                                <input class="form-check-input mark-review-cb" type="checkbox" id="mark-@i" data-question-index="@i">
                                <label class="form-check-label small" for="mark-@i">
                                    Đánh dấu
                                </label>
                            </div>
                        </div>
                        <div class="card-body">
                            <input type="hidden" name="UserAnswers[@i].QuestionId" value="@question.QuestionId" />

                            @if (question.QuestionType == "MCQ" || question.QuestionType == "TRUE_FALSE")
                            {
                                <ul class="list-group list-group-flush">
                                    @foreach (var option in question.AnswerOptions.OrderBy(o => o.OptionId))
                                    {
                                        <li class="list-group-item">
                                            <div class="form-check">
                                                <input class="form-check-input answer-input" type="radio" name="UserAnswers[@i].ChosenOptionId"
                                                       id="option-@option.OptionId" value="@option.OptionId"
                                                       data-question-index="@i" checked="@(savedAnswer?.ChosenOptionId == option.OptionId)">
                                                <label class="form-check-label" for="option-@option.OptionId">
                                                    @option.OptionText
                                                </label>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                            else if (question.QuestionType == "ESSAY")
                            {
                                <textarea name="UserAnswers[@i].AnswerText" class="form-control answer-input"
                                  rows="5" placeholder="Nhập câu trả lời của bạn..."
                                  data-question-index="@i">@savedAnswer?.AnswerText</textarea>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const questionCount = @questions.Count;

        // === HÀM KIỂM TRA TRƯỚC KHI NỘP BÀI ===
        function validateAndSubmit() {
            let firstUnansweredIndex = -1;
            $('.question-card').removeClass('unanswered-error');

            for (let i = 0; i < questionCount; i++) {
                let questionCard = $('#question-card-' + i);
                let isAnswered = false;

                if (questionCard.find('input[type="radio"]').length > 0) {
                    if ($('input[name="UserAnswers[' + i + '].ChosenOptionId"]:checked').length > 0) {
                        isAnswered = true;
                    }
                }
                else if (questionCard.find('textarea').length > 0) {
                    if ($('textarea[name="UserAnswers[' + i + '].AnswerText"]').val().trim() !== '') {
                        isAnswered = true;
                    }
                }

                if (!isAnswered) {
                    firstUnansweredIndex = i;
                    break;
                }
            }

            if (firstUnansweredIndex !== -1) {
                alert('Vui lòng hoàn thành câu hỏi số ' + (firstUnansweredIndex + 1) + ' trước khi nộp bài.');
                const targetElement = document.getElementById('question-card-' + firstUnansweredIndex);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    $(targetElement).addClass('unanswered-error');
                }
                return false;
            }

            return confirm('Tất cả các câu hỏi đã được trả lời. Bạn có chắc chắn muốn nộp bài không?');
        }


        $(document).ready(function () {
            // === LOGIC ĐỒNG HỒ ĐẾM NGƯỢC ===
            const totalDuration = @Model.Test.DurationMinutes * 60;
            let timeRemaining = @Model.TimeRemainingInSeconds;
            const timerTextElement = document.getElementById('timer-text');
            const testForm = document.getElementById('testForm');

            const ctx = document.getElementById('timer-chart').getContext('2d');
            const timerChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: [timeRemaining, totalDuration - timeRemaining],
                        backgroundColor: ['#4e73df', '#eaecf4'],
                        borderWidth: 0,
                    }]
                },
                options: {
                    responsive: true,
                    cutout: '80%',
                    plugins: { tooltip: { enabled: false } },
                    animation: { duration: 500 }
                }
            });

            function updateTimer() {
                if (timeRemaining <= 0) {
                    timerTextElement.textContent = "Hết giờ!";
                    if(testForm) {
                        testForm.removeAttribute('onsubmit');
                        testForm.submit();
                    }
                    clearInterval(timerInterval);
                    return;
                }

                timerChart.data.datasets[0].data[0] = timeRemaining;
                timerChart.data.datasets[0].data[1] = totalDuration - timeRemaining;
                timerChart.update();

                const minutes = Math.floor(timeRemaining / 60);
                const seconds = Math.floor(timeRemaining % 60);
                timerTextElement.textContent = minutes.toString().padStart(2, '0') + ":" + seconds.toString().padStart(2, '0');

                timeRemaining--;
            }
            const timerInterval = setInterval(updateTimer, 1000);
            updateTimer();

            // === LOGIC BẢNG ĐIỀU HƯỚNG CÂU HỎI ===
            $('.palette-item').on('click', function(e) {
                e.preventDefault();
                var targetId = $(this).attr('href');
                var targetElement = $(targetId);
                if (targetElement.length) {
                    $('html, body').animate({
                        scrollTop: targetElement.offset().top - 20
                    }, 500);
                }
            });

            function updatePaletteState() {
                for (let i = 0; i < questionCount; i++) {
                    let isAnswered = false;
                    const radioChecked = $(`input[name="UserAnswers[${i}].ChosenOptionId"]:checked`);
                    const textarea = $(`textarea[name="UserAnswers[${i}].AnswerText"]`);

                    if (radioChecked.length > 0) {
                        isAnswered = true;
                    } else if (textarea.length > 0 && textarea.val().trim() !== '') {
                        isAnswered = true;
                    }
                    $(`#palette-item-${i}`).toggleClass('answered', isAnswered);
                }
            }

            $('.mark-review-cb').on('change', function() {
                var questionIndex = $(this).data('question-index');
                $('#palette-item-' + questionIndex).toggleClass('marked', $(this).is(':checked'));
            });

            // === LOGIC TỰ ĐỘNG LƯU (AUTO-SAVE) ===
            var autoSaveTimeout;
            var statusDiv = $('#autosave-status');

            $('.answer-input').on('change input', function() {
                updatePaletteState();
                clearTimeout(autoSaveTimeout);
                statusDiv.text('Đang nhập...').css('opacity', 1);
                var input = $(this);

                autoSaveTimeout = setTimeout(function() {
                    statusDiv.text('Đang lưu...');
                    var questionIndex = input.data('question-index');
                    var questionId = $(`input[name="UserAnswers[${questionIndex}].QuestionId"]`).val();

                    var answerData = {
                        SessionId: @Model.SessionId,
                        QuestionId: parseInt(questionId),
                        ChosenOptionId: null,
                        AnswerText: null
                    };

                    if (input.is(':radio')) {
                        answerData.ChosenOptionId = parseInt(input.val());
                    } else {
                        answerData.AnswerText = input.val();
                    }

                    var antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: '@Url.Action("SaveAnswer", "TestSession")',
                        type: 'POST',
                        contentType: 'application/json',
                        headers: {
                            'RequestVerificationToken': antiForgeryToken
                        },
                        data: JSON.stringify(answerData),
                        success: function(response) {
                            if(response.success) {
                                statusDiv.text('Đã lưu ✓');
                                setTimeout(() => statusDiv.css('opacity', 0), 2000);
                            } else {
                                statusDiv.text('Lỗi lưu bài!');
                            }
                        },
                        error: function() {
                            statusDiv.text('Mất kết nối!');
                        }
                    });
                }, 1500);
            });

            updatePaletteState();
        });
    </script>
}